#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/params.fc";

;;
;;  TON NFT Item Smart Contract
;;

{-

    NOTE that this tokens can be transferred within the same workchain.

    This is suitable for most tokens, if you need tokens transferable between workchains there are two solutions:

    1) use more expensive but universal function to calculate message forward fee for arbitrary destination (see `misc/forward-fee-calc.cs`)

    2) use token holder proxies in target workchain (that way even 'non-universal' token can be used from any workchain)

-}

int min_tons_for_storage() asm "50000000 PUSHINT"; ;; 0.05 TON

;;
;;  Storage
;;
;;  uint64 index
;;  MsgAddressInt collection_address
;;  MsgAddressInt owner_address
;;  cell content
;;

;; Storage variables
global int storage::index;
global slice storage::collection_address;
global slice storage::owner_address;
global cell storage::content;
global int init?;

() load_data() impure {
    slice ds = get_data().begin_parse();
    
    storage::index = ds~load_uint(64);
    storage::collection_address = ds~load_msg_addr();
    init? = false;
    
    if (ds.slice_bits() > 0) {
        init? = true;
        storage::owner_address = ds~load_msg_addr();
        storage::content = ds~load_ref();
    }
}

() save_data() impure {
    set_data(begin_cell()
        .store_uint(storage::index, 64)
        .store_slice(storage::collection_address)
        .store_slice(storage::owner_address)
        .store_ref(storage::content)
        .end_cell()
    );
}

() send_msg(slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 010000
    .store_slice(to_address)
    .store_coins(amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op, 32)
    .store_uint(query_id, 64);

  if (~ builder_null?(payload)) {
    msg = msg.store_builder(payload);
  }

  send_raw_message(msg.end_cell(), send_mode);
}

() burn_token(slice owner_address, slice collection_address, int query_id, int my_balance) impure inline {    
    ;; Send burn notification to collection
    var msg = begin_cell()
        .store_uint(0x18, 6)           ;; nobounce
        .store_slice(collection_address)
        .store_coins(my_balance - min_tons_for_storage())  ;; Send remaining balance
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op::burn_notification(), 32)
        .store_uint(query_id, 64)
        .store_slice(owner_address);
    
    send_raw_message(msg.end_cell(), 128);  ;; Changed mode to 128 (carry all remaining balance)
    
    ;; Clear token data
    set_data(begin_cell()
        .store_uint(storage::index, 64)
        .store_slice(storage::collection_address)
        .store_slice(begin_cell().store_uint(0, 2).end_cell().begin_parse())
        .store_ref(storage::content)
        .end_cell());
}

() transfer_ownership(int my_balance, slice sender_address, int query_id, slice in_msg_body, int fwd_fees) impure inline {
    throw_unless(401, equal_slices_bits(sender_address, storage::owner_address));

    slice new_owner_address = in_msg_body~load_msg_addr();

    slice zero_address = begin_cell()
                            .store_uint(2, 2)  ;; addr_std$10
                            .store_uint(0, 1)  ;; anycast = false
                            .store_int(0, 8)   ;; workchain_id = 0
                            .store_uint(0, 256)  ;; 256 bits of zeros
                            .end_cell()
                            .begin_parse();
    
    ;; Check if new owner address is null address
    if (equal_slices_bits(new_owner_address, begin_cell().store_uint(0, 2).end_cell().begin_parse())) {
        burn_token(storage::owner_address, storage::collection_address, query_id, my_balance);
        return ();
    }
    if (equal_slices_bits(new_owner_address, zero_address)) {
        burn_token(storage::owner_address, storage::collection_address, query_id, my_balance);
        return ();
    }

    force_chain(new_owner_address);
    slice response_destination = in_msg_body~load_msg_addr();
    in_msg_body~load_int(1); ;; this nft don't use custom_payload
    int forward_amount = in_msg_body~load_coins();

    int rest_amount = my_balance - min_tons_for_storage();
    if (forward_amount) {
      rest_amount -= (forward_amount + fwd_fees);
    }
    int need_response = response_destination.preload_uint(2) != 0; ;; if NOT addr_none: 00
    if (need_response) {
      rest_amount -= fwd_fees;
    }

    throw_unless(402, rest_amount >= 0); ;; base nft spends fixed amount of gas, will not check for response

    if (forward_amount) {
      send_msg(new_owner_address, forward_amount, op::ownership_assigned(), query_id, begin_cell().store_slice(storage::owner_address).store_slice(in_msg_body), 1);  ;; paying fees, revert on errors
    }
    if (need_response) {
      force_chain(response_destination);
      send_msg(response_destination, rest_amount, op::excesses(), query_id, null(), 1); ;; paying fees, revert on errors
    }

    storage::owner_address = new_owner_address;
    save_data();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = cs~load_coins(); ;; we use message fwd_fee for estimation of forward_payload costs

    load_data();
    if (~ init?) {
        throw_unless(405, equal_slices_bits(storage::collection_address, sender_address));
        storage::owner_address = in_msg_body~load_msg_addr();
        storage::content = in_msg_body~load_ref();
        save_data();
        return ();
    }
    
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    
    if (op == op::transfer()) {
        transfer_ownership(my_balance, sender_address, query_id, in_msg_body, fwd_fee);
        return ();
    }
    if (op == op::get_static_data()) {
      send_msg(sender_address, 0, op::report_static_data(), query_id, begin_cell().store_uint(storage::index, 256).store_slice(storage::collection_address), 64);  ;; carry all the remaining value of the inbound message
      return ();
    }
    if (op == op::burn()) {
        throw_unless(401, equal_slices_bits(sender_address, storage::owner_address));
        burn_token(storage::owner_address, storage::collection_address, query_id, my_balance);
        return ();
    }
    throw(0xffff);
}

;;
;;  GET Methods
;;

(int, int, slice, slice, cell) get_nft_data() method_id {
    load_data();
    return (init?, storage::index, storage::collection_address, storage::owner_address, storage::content);
}

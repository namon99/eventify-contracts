#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/params.fc";

;; NFT collection smart contract

;; storage scheme
;; default#_ royalty_factor:uint16 royalty_base:uint16 royalty_address:MsgAddress = RoyaltyParams;
;; storage#_ owner_address:MsgAddress next_item_index:uint64
;;           ^[collection_content:^Cell common_content:^Cell]
;;           nft_item_code:^Cell
;;           royalty_params:^RoyaltyParams
;;           mint_price:Coins
;;           max_supply:uint64
;;           end_time:uint64
;;           refund_percent:uint16
;;           tickets_sold:uint64
;;           = Storage;

;; Storage variables
global slice storage::owner_address;
global int storage::next_item_index;
global cell storage::collection_content;
global cell storage::common_content;
global cell storage::nft_item_code;
global cell storage::royalty_params;
global int storage::mint_price;
global int storage::max_supply;
global int storage::end_time;
global int storage::refund_percent;
global int storage::tickets_sold;

() load_data() impure {
    slice ds = get_data().begin_parse();
    
    storage::owner_address      = ds~load_msg_addr();
    storage::next_item_index    = ds~load_uint(64);
    
    cell content                = ds~load_ref();
    slice cs                    = content.begin_parse();
    storage::collection_content = cs~load_ref();
    storage::common_content     = cs~load_ref();
    
    storage::nft_item_code      = ds~load_ref();
    storage::royalty_params     = ds~load_ref();
    storage::mint_price         = ds~load_coins();
    storage::max_supply         = ds~load_uint(64);
    storage::end_time           = ds~load_uint(64);
    storage::refund_percent     = ds~load_uint(16);
    storage::tickets_sold       = ds~load_uint(64);
}

() save_data() impure {
    set_data(begin_cell()
        .store_slice(storage::owner_address)
        .store_uint(storage::next_item_index, 64)
        .store_ref(begin_cell()
            .store_ref(storage::collection_content)
            .store_ref(storage::common_content)
            .end_cell())
        .store_ref(storage::nft_item_code)
        .store_ref(storage::royalty_params)
        .store_coins(storage::mint_price)
        .store_uint(storage::max_supply, 64)
        .store_uint(storage::end_time, 64)
        .store_uint(storage::refund_percent, 16)
        .store_uint(storage::tickets_sold, 64)
        .end_cell());
}

cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
    cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
    return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
    return begin_cell().store_uint(4, 3)
                        .store_int(wc, 8)
                        .store_uint(cell_hash(state_init), 256)
                        .end_cell()
                        .begin_parse();
}

() deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content) impure {
    cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
    slice nft_address = calculate_nft_item_address(workchain(), state_init);
    var msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(nft_address)
                .store_coins(amount)
                .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
                .store_ref(state_init)
                .store_ref(nft_content);
    send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() send_royalty_params(slice to_address, int query_id, slice data) impure inline {
    var msg = begin_cell()
        .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool packages:MsgAddress -> 011000
        .store_slice(to_address)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op::report_royalty_params(), 32)
        .store_uint(query_id, 64)
        .store_slice(data);
    send_raw_message(msg.end_cell(), 64); ;; carry all the remaining value of the inbound message
}

() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    int msg_value = cs~load_coins();
    
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    load_data();

    ;; Handle burn notification from NFT item
    if (op == op::burn_notification()) {
        throw_unless(406, now() < storage::end_time);  ;; no refunds after end sale time
        slice owner_address = in_msg_body~load_msg_addr();

        ;; Calculate refund amount if refund is enabled
        if (storage::refund_percent > 0) {
            int refund_amount = muldiv(storage::mint_price, storage::refund_percent, 10000);
            
            ;; Send refund to the owner
            var msg = begin_cell()
                .store_uint(0x10, 6) ;; nobounce
                .store_slice(owner_address)
                .store_coins(refund_amount)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(op::refund(), 32)
                .store_uint(query_id, 64);
            send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately
        }

        storage::tickets_sold -= 1;
        save_data();
        return ();
    }

    if (op == op::get_royalty_params()) {
        send_royalty_params(sender_address, query_id, storage::royalty_params.begin_parse());
        return ();
    }
    
    throw_unless(401, equal_slices_bits(sender_address, storage::owner_address));
    
    if (op == 1) { ;; deploy new nft
        throw_unless(406, now() < storage::end_time);
        ;; throw_unless(407, storage::max_supply == 0);
        throw_unless(407, storage::next_item_index < storage::max_supply);
        
        int item_index = in_msg_body~load_uint(64);
        throw_unless(402, item_index <= storage::next_item_index);
        
        int amount = in_msg_body~load_coins();
        throw_unless(408, amount >= storage::mint_price);
        
        var is_last = item_index == storage::next_item_index;
        deploy_nft_item(item_index, storage::nft_item_code, amount, in_msg_body~load_ref());

        storage::tickets_sold += 1;
        
        if (is_last) {
            storage::next_item_index += 1;
        }
        save_data();
        return ();
    }
    if (op == 2) { ;; batch deploy of new nfts
        throw_unless(406, now() < storage::end_time);
        int counter = 0;
        cell deploy_list = in_msg_body~load_ref();
        do {
            var (item_index, item, f?) = deploy_list~udict::delete_get_min(64);
            if (f?) {
                counter += 1;
                if (counter >= 250) { ;; Limit due to limits of action list size
                    throw(399);
                }

                throw_unless(403 + counter, item_index <= storage::next_item_index);
                deploy_nft_item(item_index, storage::nft_item_code, item~load_coins(), item~load_ref());
                if (item_index == storage::next_item_index) {
                    storage::next_item_index += 1;
                }
                storage::tickets_sold += 1;
            }
        } until ( ~ f?);
        save_data();
        return ();
    }
    if (op == 3) { ;; change owner
        slice new_owner = in_msg_body~load_msg_addr();
        storage::owner_address = new_owner;
        save_data();
        return ();
    }
    if (op == 4) { ;; change content
        storage::collection_content = in_msg_body~load_ref();
        save_data();
        return ();
    }
    throw(0xffff);
}

;; Get methods

(int, cell, slice) get_collection_data() method_id {
    load_data();
    slice cs = storage::collection_content.begin_parse();
    return (storage::next_item_index, cs~load_ref(), storage::owner_address);
}

slice get_nft_address_by_index(int index) method_id {
    load_data();
    cell state_init = calculate_nft_item_state_init(index, storage::nft_item_code);
    return calculate_nft_item_address(0, state_init);
}

(int, int, slice) royalty_params() method_id {
    load_data();
    slice rs = storage::royalty_params.begin_parse();
    return (rs~load_uint(16), rs~load_uint(16), rs~load_msg_addr());
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
    load_data();
    return (begin_cell()
                        .store_uint(1, 8) ;; offchain tag
                        .store_slice(storage::common_content.begin_parse())
                        .store_ref(individual_nft_content)
            .end_cell());
}

(int, int, int, int) get_collection_limits() method_id {
    load_data();
    return (storage::mint_price, storage::max_supply, storage::end_time, storage::refund_percent);
}

(int) get_tickets_sold() method_id {
    load_data();
    return storage::tickets_sold;
}